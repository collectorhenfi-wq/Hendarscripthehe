-- By Hendar | id=L7V7wX | obf=roblox | file=download_4.txt


local E5ZC4fAJ = ""
local function iIREGBWe(s)
  local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
  s = string.gsub(s, '[^'..b..'=]', '')
  return (s:gsub('.', function(x)
    if (x == '=') then return '' end
    local r,f = '', (b:find(x)-1)
    for i=6,1,-1 do r = r .. (f%2^i - f%2^(i-1) > 0 and '1' or '0') end
    return r
  end):gsub('%d%d%d?%d?%d?%d?%d?%d', function(x)
    if (#x ~= 8) then return '' end
    local c = 0
    for i=1,8 do c = c + (x:sub(i,i) == '1' and 2^(8-i) or 0) end
    return string.char(c)
  end))
end

local l6bSuQ4 = loadstring or load
local a2G6y8j = iIREGBWe(E5ZC4fAJ)
local ok, err = pcall(function() l6bSuQ4(a2G6y8j)() end)
if not ok then
  -- fallback try: attempt to load and call safely
  local f = l6bSuQ4 and l6bSuQ4(a2G6y8j) or nil
  if f then pcall(f) end
end

-- EOF
